{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Home.js","decks/DeckAdd.js","decks/Deck.js","decks/DeckEdit.js","decks/DeckStudy.js","cards/CardAdd.js","cards/CardEdit.js","Layout/index.js","App.js","index.js"],"names":["Header","React","createElement","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","deckWithoutCards","async","fetchJson","url","options","onCancel","response","fetch","status","Error","statusText","json","error","name","console","stack","Promise","resolve","listDecks","signal","readDeck","deckId","deleteDeck","method","append","Home","decks","setDecks","useState","navigate","useNavigate","useEffect","abortController","AbortController","then","catch","log","abort","Fragment","onClick","map","key","id","description","type","handleViewDeck","handleStudyDeck","window","confirm","handleDeleteDeck","length","DeckAdd","initialFormState","formData","setFormData","handleChange","_ref","target","value","aria-label","href","aria-current","htmlFor","aria-describedby","placeholder","onChange","rows","event","deckCount","preventDefault","body","JSON","stringify","createDeck","Deck","setDeck","showDetails","setShowDetails","location","useLocation","useParams","handleDeleteCard","cardId","deleteCard","pathname","includes","handleEditDeck","handleStudy","handleAddCards","card","front","back","handleEditCard","Outlet","DeckEdit","loading","setLoading","prevFormData","Number","updatedDeck","updateDeck","DeckStudy","isFlipped","setIsFlipped","cardIndex","setCardIndex","cardCount","viewError","handleFlip","handleNext","CardAdd","createCard","CardEdit","readCard","updatedCard","updateCard","Layout","Routes","Route","path","element","App","ReactDOM","createRoot","document","getElementById","render","StrictMode","Router","basename"],"mappings":"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","file":"static/js/main.85dbb1b0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\n\nfunction Home() {\n    const [decks, setDecks] = useState([]);\n\n    const navigate = useNavigate();\n\n    const handleCreateDeck = async() => {\n        navigate(\"/decks/new\");\n    }\n\n    const handleViewDeck = async(deckId) => {\n        navigate(`/decks/${deckId}`);\n    }\n\n    const handleStudyDeck = async(deckId) => {\n        navigate(`/decks/${deckId}/study`);\n    }\n\n    /*\n        When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel.\n        If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n        The user can delete a deck by clicking the Delete button on the home screen.\n     */\n    const handleDeleteDeck = async(deckId) => {\n        const abortController = new AbortController();\n        const result = window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\");\n\n        if (result) {\n            await deleteDeck(deckId, abortController.signal)\n                .then(() => listDecks(abortController.signal))\n                .then(setDecks)\n                .catch(console.log);\n        }\n    }\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        listDecks(abortController.signal)\n            .then(setDecks)\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }, []);\n\n    return (\n        <>\n            {/* A Create Deck button is shown, and clicking it brings the user to the Create Deck screen. */}\n            <button className=\"btn btn-secondary btn-lg\" onClick={handleCreateDeck}>+ Create Deck</button>\n\n            {/* Existing decks are each shown with the deck name, the number of cards, and a Study, View, and Delete button. */}\n            <div className=\"container row mt-3\">\n                {\n                    decks.map((deck) => (\n                        <div className=\"col-12\" key={deck.id}>\n                            <div className=\"card\" key={deck.id}>\n                                <div className=\"card-body\">\n                                    <h3 className=\"card-title\">{deck.name}</h3>\n\n                                    <p className=\"card-text\">{deck.description}</p>\n\n                                    {/* Clicking the View button brings the user to the Deck screen. */}\n                                    <button type=\"button\" className=\"btn btn-primary mr-1\"\n                                            onClick={() => handleViewDeck(deck.id)}>View\n                                    </button>\n\n                                    {/* Clicking the Study button brings the user to the Study screen. */}\n                                    <button type=\"button\" className=\"btn btn-secondary mr-1\"\n                                            onClick={() => handleStudyDeck(deck.id)}>Study\n                                    </button>\n\n                                    {/* Clicking the Delete button shows a warning message before deleting the deck. */}\n                                    <button type=\"button\" className=\"btn btn-danger\"\n                                            onClick={() => handleDeleteDeck(deck.id)}>Delete\n                                    </button>\n\n                                    <div className=\"row\">\n                                        <div className=\"col text-right\">\n                                            <span className=\"badge badge-light\">{deck.cards.length} cards</span>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n            <br/>\n        </>\n    );\n}\n\nexport default Home;","import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createDeck, listDecks } from \"../utils/api/index\";\n\nfunction DeckAdd() {\n    const initialFormState = {\n        name: \"\",\n        description: \"\",\n    };\n    const [decks, setDecks] = useState([]);\n    const [formData, setFormData] = useState({ ...initialFormState });\n    const navigate = useNavigate();\n\n    const handleChange = ({ target }) => {\n        setFormData({\n            ...formData,\n            [target.name]: target.value,\n        });\n    };\n\n    function handleSubmit(event) {\n        const abortController = new AbortController();\n        const deckCount = decks.length;\n        event.preventDefault();\n        createDeck(formData, abortController.signal)\n            .then((deck) => navigate(`/decks/${deckCount + 1}`))\n            .catch(console.log);\n        setFormData({ ...initialFormState });\n    }\n\n    function handleCancel() {\n        navigate(\"/\");\n    }\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        listDecks(abortController.signal)\n            .then(setDecks)\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }, []);\n\n    return (\n        <>\n            {/* There is a breadcrumb navigation bar with a link to home / followed by the text Create Deck (i.e., Home/Create Deck). */}\n            <div>\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Create Deck</li>\n                    </ol>\n                </nav>\n            </div>\n\n            <h2>Create Deck</h2>\n\n            {/* The name field is an <input> field of type text */}\n            {/* The description field is a <textarea> field that can be multiple lines of text. */}\n            {/* If the user clicks Submit, the user is taken to the Deck screen. */}\n            {/* If the user clicks Cancel, the user is taken to the Home screen. */}\n\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\"\n                        placeholder=\"Deck Name\"\n                        onChange={handleChange}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea\n                        className=\"form-control\"\n                        id=\"description\"\n                        name=\"description\"\n                        placeholder=\"Brief description of the deck\"\n                        rows=\"3\"\n                        onChange={handleChange}\n                    />\n                </div>\n                <button type=\"button\" className=\"btn btn-secondary mr-1\" onClick={handleCancel}>Cancel</button>\n                <button type=\"submit\" className=\"btn btn-primary mr-1\" onClick={handleSubmit}>Submit</button>\n            </form>\n        </>\n    );\n}\n\nexport default DeckAdd;","import React, { useState, useEffect } from \"react\";\nimport { Outlet, useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { deleteCard, deleteDeck, listDecks, readDeck } from \"../utils/api\";\n\nfunction Deck() {\n    const [deck, setDeck] = useState({});\n    const [showDetails, setShowDetails] = useState(true);\n\n    const location = useLocation();\n    const { deckId } = useParams();\n    const navigate = useNavigate();\n\n    const handleEditDeck = async(deckId) => {\n        navigate(`/decks/${deckId}/edit`);\n    }\n\n    const handleStudy = async(deckId) => {\n        navigate(`/decks/${deckId}/study`);\n    }\n\n    const handleAddCards = async(deckId) => {\n        navigate(`/decks/${deckId}/cards/new`);\n    }\n\n    const handleDeleteDeck = async(deckId) => {\n        const abortController = new AbortController();\n        const result = window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\");\n\n        if (result) {\n            await deleteDeck(deckId, abortController.signal)\n                .then(() => listDecks(abortController.signal))\n                .catch(console.log);\n\n            navigate(\"/\");\n        }\n    }\n\n    const handleEditCard = async(cardId, deckId) => {\n        navigate(`/decks/${deckId}/cards/${cardId}/edit`);\n    }\n\n    /*\n        When the user clicks the Delete button associated with a card, a warning message is shown and the user\n        can click OK or Cancel. If the user clicks OK, the card is deleted.\n     */\n    const handleDeleteCard = async(cardId, deckId) => {\n        const abortController = new AbortController();\n        const result = window.confirm(\"Delete this card?\\n\\nYou will not be able to recover it.\");\n\n        if (result) {\n            await deleteCard(cardId, abortController.signal)\n                .then(() => readDeck(deckId, abortController.signal))\n                .then(setDeck)\n                .catch(console.log);\n        }\n    }\n\n    useEffect(() => {\n        // handle edit and add cards location\n        if (location.pathname.includes(\"study\") || location.pathname.includes(\"cards\") || location.pathname.includes(\"edit\")) {\n            setShowDetails(false);\n        } else {\n            setShowDetails(true);\n        }\n    }, [location]);\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        readDeck(deckId, abortController.signal)\n            .then(setDeck)\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }, [deckId, location]);\n\n    return (\n        <div>\n            {\n                showDetails && (\n                    <>\n                        <div>\n                            {/* There is a breadcrumb navigation bar with a link to home / followed by the name of the deck (e.g., Home/React Router). */}\n                            <nav aria-label=\"breadcrumb\">\n                                <ol className=\"breadcrumb\">\n                                    <li className=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">{deck.name}</li>\n                                </ol>\n                            </nav>\n                        </div>\n\n                        {/* The screen includes the deck name (e.g., \"React Router\") and deck description (e.g., \"React Router is a collection of navigational components that compose declaratively in your application\"). */}\n                        {/* The screen includes Edit, Study, Add Cards, and Delete buttons */}\n                        <div>\n                            <h2>{deck.name}</h2>\n                            <p>{deck.description}</p>\n\n                            <button type=\"button\"\n                                    className=\"btn btn-secondary mr-1\"\n                                    onClick={() => handleEditDeck(deck.id)}\n                            >\n                                Edit\n                            </button>\n\n                            <button type=\"button\"\n                                    className=\"btn btn-primary mr-1\"\n                                    onClick={() => handleStudy(deck.id)}\n                            >\n                                Study\n                            </button>\n\n                            <button type=\"button\"\n                                    className=\"btn btn-primary mr-1\"\n                                    onClick={() => handleAddCards(deck.id)}\n                            >\n                                Add Cards\n                            </button>\n\n                            <button type=\"button\"\n                                    className=\"btn btn-danger\"\n                                    onClick={() => handleDeleteDeck(deck.id)}\n                            >\n                                Delete\n                            </button>\n                        </div>\n\n                        <div className=\"col-12\">\n                            <h3 className=\"card-title row mt-3\">Cards</h3>\n\n                            <div className=\"container row mt-3\">\n                                { deck.cards && deck.cards.length > 0 ? (\n                                    deck.cards.map((card) => (\n                                        <div className=\"col-12\" key={card.id}>\n                                            <div className=\"card\">\n                                                <div className=\"card-body\">\n                                                    <p className=\"card-text\">{card.front}</p>\n                                                    <p className=\"card-text\">{card.back}</p>\n\n                                                    <button type=\"button\" className=\"btn btn-secondary mr-1\"\n                                                            onClick={() => handleEditCard(card.id, deck.id)}>\n                                                        Edit\n                                                    </button>\n\n                                                    <button type=\"button\" className=\"btn btn-danger\"\n                                                            onClick={() => handleDeleteCard(card.id, deckId)}>\n                                                        Delete\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    ))\n                                ) : (\n                                    <p>No cards available.</p>\n                                )}\n                            </div>\n                        </div>\n                        <br />\n\n                    </>\n                )\n            }\n            <Outlet/>\n\n        </div>\n    );\n}\n\nexport default Deck;","import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { updateDeck, readDeck } from \"../utils/api\";\n\nfunction DeckEdit() {\n    const initialFormState = {\n        id: 0,\n        name: \"\",\n        description: \"\",\n    };\n    const [formData, setFormData] = useState({ ...initialFormState });\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n    const { deckId } = useParams();\n\n    const handleChange = ({ target }) => {\n        const { name, value } = target;\n        setFormData((prevFormData) => ({\n            ...prevFormData,\n            [name]: value,\n        }));\n    };\n\n    function handleSubmit(event) {\n        const abortController = new AbortController();\n        event.preventDefault();\n        updateDeck(formData, abortController.signal)\n            .then(() => {\n                setFormData({ ...initialFormState });\n                navigate(-1);\n            })\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }\n\n    function handleCancel() {\n        navigate(-1);\n    }\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        readDeck(deckId, abortController.signal)\n            .then((deck) => {\n                setFormData({\n                    id: Number(deckId),\n                    name: deck.name || \"\",\n                    description: deck.description || \"\"\n                });\n                setLoading(false);\n            })\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }, [deckId]);\n\n    if (loading) {\n        return <p>Loading...</p>; // Show a loading state while fetching data\n    }\n\n    return (\n        <>\n            {/* There is a breadcrumb navigation bar with a link to home / followed by the text Create Deck (i.e., Home/Edit Deck). */}\n            <div>\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Edit Deck</li>\n                    </ol>\n                </nav>\n            </div>\n\n            <h2>Edit Deck</h2>\n\n            {/* It displays the same form as the Create Deck screen, except it is prefilled with information for the existing deck. */}\n            {/* If the user clicks Cancel, the user is taken to the Deck screen. */}\n\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\"\n                        placeholder=\"Deck Name\"\n                        onChange={handleChange}\n                        value={formData.name}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea\n                        className=\"form-control\"\n                        id=\"description\"\n                        name=\"description\"\n                        placeholder=\"Brief description of the deck\"\n                        rows=\"3\"\n                        onChange={handleChange}\n                        value={formData.description}\n                    />\n                </div>\n                <button type=\"button\" className=\"btn btn-secondary mr-1\" onClick={handleCancel}>Cancel</button>\n                <button type=\"submit\" className=\"btn btn-primary mr-1\" onClick={handleSubmit}>Submit</button>\n            </form>\n        </>\n    );\n}\n\nexport default DeckEdit;","import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\";\n\nfunction DeckStudy() {\n    const { deckId } = useParams();\n    const [deck, setDeck] = useState({});\n    const [isFlipped, setIsFlipped] = useState(false);\n    const [cardIndex, setCardIndex] = useState(0);\n    const cardCount = deck.cards ? deck.cards.length : 0;\n    const viewError = cardCount <= 2;\n    const navigate = useNavigate();\n\n    const handleAddCards  = async(deckId) => {\n        navigate(`/decks/${deckId}/cards/new`);\n    }\n\n    const handleFlip = () => {\n        setIsFlipped(!isFlipped);\n    }\n\n    const handleNext = () => {\n        if (cardIndex + 1 < cardCount) {\n            setCardIndex(cardIndex + 1);\n            setIsFlipped(false);\n        } else {\n            const result = window.confirm(\"Restart cards?\\n\\nClick 'Cancel' to return to the home page.\");\n            if (result) {\n                setCardIndex(0);\n                setIsFlipped(false);\n            } else {\n                navigate(\"/\");\n            }\n        }\n    }\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        readDeck(deckId, abortController.signal)\n            .then(setDeck)\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }, [deckId]);\n\n    return (\n        <>\n            {/* There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, and finally the text Study (e.g., Home/Rendering In React/Study). */}\n            <div>\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n                        <li className=\"breadcrumb-item\"><a href={`/decks/${deckId}`}>{deck.name}</a></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Study</li>\n                    </ol>\n                </nav>\n            </div>\n\n            {/* The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen. */}\n            <h2>{deck.name}: Study</h2>\n\n            <div className=\"container row mt-3\">\n                {/* Studying a deck with two or fewer cards should display a \"Not enough cards\" message (e.g., \"Not enough cards. You need at least 3 cards to study. There are 2 cards in this deck.\"). */}\n                {\n                    viewError ? (\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h3 className=\"card-title\">Not enough cards.</h3>\n                                <p className=\"card-text\">\n                                    You need at least 3 cards to study. There are {cardCount} cards in this deck.\n                                </p>\n                                <button className=\"btn btn-primary\" onClick={() => handleAddCards(deck.id)}>Add Cards</button>\n                            </div>\n                        </div>\n                    ) : (\n                        <>\n                            {/* A card is shown, with a question on the front-side and the answer on the back-side. */}\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    {/* The number of cards remaining in the deck is shown. */}\n                                    <h3 className=\"card-title\">Card {cardIndex + 1} of {cardCount}</h3>\n                                    <p className=\"card-text\">{deck.cards && (isFlipped ? deck.cards[cardIndex].back : deck.cards[cardIndex].front)}</p>\n\n                                    {/* A button at the bottom of each card \"flips\" it, and shows the back-side. */}\n                                    {/* After flipping the card, the user is shown a \"Next\" button to continue to the next card. */}\n                                    <button className=\"btn btn-secondary mr-1\" onClick={handleFlip}>Flip</button>\n\n                                    {/* When the user reaches the end of the deck, they have the option to restart the deck or return to the home screen. */}\n                                    {isFlipped && <button className=\"btn btn-primary mr-1\" onClick={handleNext}>Next</button>}\n                                </div>\n                            </div>\n                        </>\n                    )\n                }\n\n\n            </div>\n        </>\n    );\n}\n\nexport default DeckStudy;","import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { createCard, readDeck } from \"../utils/api\";\n\nfunction CardAdd() {\n    const initialFormState = {\n        front: \"\",\n        back: \"\",\n    };\n    const [deck, setDeck] = useState({});\n    const [formData, setFormData] = useState({ ...initialFormState });\n    const navigate = useNavigate();\n    const { deckId } = useParams();\n\n    const handleChange = ({ target }) => {\n        setFormData({\n            ...formData,\n            [target.name]: target.value,\n        });\n    };\n\n    function handleSubmit(event) {\n        const abortController = new AbortController();\n        event.preventDefault();\n        createCard(deckId, formData, abortController.signal)\n            .then(() => setFormData({ ...initialFormState }))\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }\n\n    function handleDone() {\n        navigate(`/decks/${deckId}`);\n    }\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        readDeck(deckId, abortController.signal)\n            .then(setDeck)\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }, [deckId]);\n\n    return (\n        <>\n            {/* There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck to which the cards are being added, and finally the text Add Card (e.g., Home/React Router/Add Card */}\n            <div>\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n                        <li className=\"breadcrumb-item\"><a href={`/decks/${deckId}`}>{deck.name}</a></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Add Card</li>\n                    </ol>\n                </nav>\n            </div>\n\n            {/* The screen displays the React Router: Add Card deck title. */}\n            <h2>Add Card</h2>\n\n            {/* A form is shown with the \"front\" and \"back\" fields for a new card. Both fields use a <textarea> tag that can accommodate multiple lines of text. */}\n            {/* If the user clicks Save, a new card is created and associated with the relevant deck. Then the form is cleared and the process for adding a card is restarted. */}\n            {/* If the user clicks Done, the user is taken to the Deck screen. */}\n\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"front\">Front</label>\n                    <textarea\n                        className=\"form-control\"\n                        id=\"front\"\n                        name=\"front\"\n                        placeholder=\"Front side of card\"\n                        rows=\"2\"\n                        onChange={handleChange}\n                        value={formData.front}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"back\">Back</label>\n                    <textarea\n                        className=\"form-control\"\n                        id=\"back\"\n                        name=\"back\"\n                        placeholder=\"Back side of card\"\n                        rows=\"2\"\n                        onChange={handleChange}\n                        value={formData.back}\n                    />\n                </div>\n                <button type=\"button\" className=\"btn btn-secondary mr-1\" onClick={handleDone}>Done</button>\n                <button type=\"submit\" className=\"btn btn-primary mr-1\" onClick={handleSubmit}>Save</button>\n            </form>\n        </>\n    );\n}\n\nexport default CardAdd;","import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { updateCard, readCard, readDeck } from \"../utils/api\";\n\nfunction CardEdit() {\n    const initialFormState = {\n        front: \"\",\n        back: \"\",\n        deckId: 0,\n        id: 0,\n    };\n    const [deck, setDeck] = useState({});\n    const [formData, setFormData] = useState({ ...initialFormState });\n    const navigate = useNavigate();\n    const { deckId, cardId } = useParams();\n    const [loading, setLoading] = useState(true);\n\n    const handleChange = ({ target }) => {\n        setFormData({\n            ...formData,\n            [target.name]: target.value,\n        });\n    };\n\n    function handleSubmit(event) {\n        const abortController = new AbortController();\n        event.preventDefault();\n        updateCard(formData, abortController.signal)\n            .then(() => setFormData({ ...initialFormState }))\n            .then(() => navigate(`/decks/${deckId}`))\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }\n\n    function handleDone() {\n        navigate(`/decks/${deckId}`);\n    }\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        readDeck(deckId, abortController.signal)\n            .then(setDeck)\n            .catch(console.log);\n\n        readCard(cardId, abortController.signal)\n            .then((card) => {\n                setFormData({\n                    id: Number(cardId),\n                    deckId: Number(deckId),\n                    front: card.front || \"\",\n                    back: card.back || \"\"\n                });\n                setLoading(false);\n            })\n            .catch(console.log);\n\n        return () => abortController.abort();\n    }, [deckId, cardId]);\n\n    if (loading) {\n        return <p>Loading...</p>; // Show a loading state while fetching data\n    }\n\n    return (\n        <>\n            {/* There is a breadcrumb navigation bar with a link to home /, followed by the name of the deck of which the edited card is a member, and finally the text Edit Card :cardId (e.g., Home/Deck React Router/Edit Card 4). */}\n            <div>\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n                        <li className=\"breadcrumb-item\"><a href={`/decks/${deckId}`}>{deck.name}</a></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Edit Card</li>\n                    </ol>\n                </nav>\n            </div>\n\n            <h2>Edit Card</h2>\n\n            {/* If the user clicks on either Save or Cancel, the user is taken to the Deck screen. */}\n\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"front\">Front</label>\n                    <textarea\n                        className=\"form-control\"\n                        id=\"front\"\n                        name=\"front\"\n                        placeholder=\"Front side of card\"\n                        rows=\"2\"\n                        onChange={handleChange}\n                        value={formData.front}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"back\">Back</label>\n                    <textarea\n                        className=\"form-control\"\n                        id=\"back\"\n                        name=\"back\"\n                        placeholder=\"Back side of card\"\n                        rows=\"2\"\n                        onChange={handleChange}\n                        value={formData.back}\n                    />\n                </div>\n                <button type=\"button\" className=\"btn btn-secondary mr-1\" onClick={handleDone}>Done</button>\n                <button type=\"submit\" className=\"btn btn-primary mr-1\" onClick={handleSubmit}>Save</button>\n            </form>\n        </>\n    );\n}\n\nexport default CardEdit;","import React from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport { Route, Routes } from \"react-router-dom\";\nimport DeckAdd from \"../decks/DeckAdd\";\nimport Deck from \"../decks/Deck\";\nimport DeckEdit from \"../decks/DeckEdit\";\nimport DeckStudy from \"../decks/DeckStudy\";\nimport CardAdd from \"../cards/CardAdd\";\nimport CardEdit from \"../cards/CardEdit\";\n\nfunction Layout() {\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n          <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"decks/new\" element={<DeckAdd />} />\n              <Route path=\"decks/:deckId\" element={<Deck />}>\n                  <Route path=\"study\" element={<DeckStudy />} />\n                  <Route path=\"edit\" element={<DeckEdit />} />\n                  <Route path=\"cards/new\" element={<CardAdd />} />\n                  <Route path=\"cards/:cardId/edit\" element={<CardEdit />} />\n              </Route>\n              <Route path=\"*\" element={<NotFound />} />\n          </Routes>\n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"./Layout\";\nimport \"./App.css\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n        <Layout />         \n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './App.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Router basename=\"/flashcard-assessment\">\n      <App />\n    </Router>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}